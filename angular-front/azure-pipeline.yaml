trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourceGroup: '1-912eadbf-playground-sandbox'
  location: 'southcentralus'
  acrName: '$(acrNameFromOutput)'
  angularVersion: '1.0.0-$(Build.BuildId)'
  angularImageName: 'employee-portal'
  azureServiceConnection: 'serviceConnection'

stages:
  - stage: PrepareEnvironment
    displayName: 'Prepare Environment'
    jobs:
      - job: GetAcrName
        displayName: 'Get ACR Name'
        steps:
          - task: AzureCLI@2
            name: SetAcrName 
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                ACR_NAME=$(az acr list --resource-group $(resourceGroup) --query "[0].name" -o tsv)
                echo "##vso[task.setvariable variable=acrNameFromOutput;isOutput=true]$ACR_NAME"
                echo "Found ACR: $ACR_NAME"

                if [ -z "$ACR_NAME" ]; then
                  echo "Error: No ACR found in resource group. Exiting."
                  exit 1
                fi

                ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
                ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
                ACR_LOGIN_SERVER="$ACR_NAME.azurecr.io"

                echo "##vso[task.setvariable variable=acrUsername;isOutput=true]$ACR_USERNAME"
                echo "##vso[task.setvariable variable=acrPassword;isOutput=true]$ACR_PASSWORD"
                echo "##vso[task.setvariable variable=acrLoginServer;isOutput=true]$ACR_LOGIN_SERVER"
                echo "ACR Login Information retrieved"

  - stage: BuildAndPush
    displayName: 'Build and Push Docker Images'
    dependsOn: PrepareEnvironment
    variables:
      acrNameFromOutput: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrNameFromOutput'] ]
      acrUsername: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrUsername'] ]
      acrPassword: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrPassword'] ]
      acrLoginServer: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrLoginServer'] ]
    jobs:
      - job: BuildAngular
        displayName: 'Build Angular Frontend'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - script: |
              echo "Logging in to ACR: $(acrLoginServer)"
              echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
            displayName: 'Login to ACR'

          - script: |
              cd front
              docker build -t $(acrLoginServer)/$(angularImageName):$(angularVersion) .
              docker tag $(acrLoginServer)/$(angularImageName):$(angularVersion) $(acrLoginServer)/$(angularImageName):latest
              docker push $(acrLoginServer)/$(angularImageName):$(angularVersion)
              docker push $(acrLoginServer)/$(angularImageName):latest
            displayName: 'Build and Push Docker Image'
