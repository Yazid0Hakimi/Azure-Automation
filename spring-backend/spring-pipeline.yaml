trigger:
  - main
pool:
  vmImage: 'ubuntu-latest'
variables:
  resourceGroup: '1-912eadbf-playground-sandbox'
  location: 'southcentralus'
  acrName: '$(acrNameFromOutput)'
  springBootVersion: '1.0.0-$(Build.BuildId)'
  discoveryServiceImageName: 'discovery-service'
  gatewayImageName: 'gateway-service'
  profileServiceImageName: 'profile-service'
  employeeServiceImageName: 'employee-performance-service'
  azureServiceConnection: 'serviceConnection'
stages:
  - stage: PrepareEnvironment
    displayName: 'Prepare Environment'
    jobs:
      - job: GetAcrName
        displayName: 'Get ACR Name'
        steps:
          - task: AzureCLI@2
            name: SetAcrName
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get the ACR name from the resource group
                ACR_NAME=$(az acr list --resource-group $(resourceGroup) --query "[0].name" -o tsv)
                echo "##vso[task.setvariable variable=acrNameFromOutput;isOutput=true]$ACR_NAME"
                echo "Found ACR: $ACR_NAME"
                
                if [ -z "$ACR_NAME" ]; then
                  echo "Error: No ACR found in resource group. Exiting."
                  exit 1
                fi
                
                # Get and store ACR credentials for later use
                ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
                ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
                ACR_LOGIN_SERVER="$ACR_NAME.azurecr.io"
                
                echo "##vso[task.setvariable variable=acrUsername;isOutput=true]$ACR_USERNAME"
                echo "##vso[task.setvariable variable=acrPassword;isOutput=true]$ACR_PASSWORD"
                echo "##vso[task.setvariable variable=acrLoginServer;isOutput=true]$ACR_LOGIN_SERVER"
                
                echo "ACR Login Information retrieved"
            displayName: 'Get ACR Name and Credentials from Azure'
  - stage: BuildAndPush
    displayName: 'Build and Push Docker Images'
    dependsOn: PrepareEnvironment
    variables:
      acrNameFromOutput: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrNameFromOutput'] ]
      acrUsername: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrUsername'] ]
      acrPassword: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrPassword'] ]
      acrLoginServer: $[ stageDependencies.PrepareEnvironment.GetAcrName.outputs['SetAcrName.acrLoginServer'] ]
    jobs:
      - job: BuildDiscoveryService
        displayName: 'Build Discovery Service'
        steps:
          # Setup Java for Maven building
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Setup Java 17'

          # Build with Maven without authentication
          - task: Maven@3
            inputs:
              mavenPomFile: 'discovery-service/pom.xml'
              goals: 'clean package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              options: '-DskipTests' # Skip tests to speed up build if needed
            displayName: 'Build Discovery Service with Maven'

          # Docker login with ACR credentials from previous stage
          - script: |
              echo "Logging in to ACR: $(acrLoginServer)"
              echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
            displayName: 'Login to ACR'

          # Build and push using docker commands directly
          - script: |
              cd discovery-service
              docker build -t $(acrLoginServer)/$(discoveryServiceImageName):$(springBootVersion) .
              docker tag $(acrLoginServer)/$(discoveryServiceImageName):$(springBootVersion) $(acrLoginServer)/$(discoveryServiceImageName):latest
              docker push $(acrLoginServer)/$(discoveryServiceImageName):$(springBootVersion)
              docker push $(acrLoginServer)/$(discoveryServiceImageName):latest
            displayName: 'Build and push Discovery Service image'
      - job: BuildGateway
        displayName: 'Build API Gateway'
        steps:
          # Setup Java for Maven building
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Setup Java 17'

          # Build with Maven without authentication
          - task: Maven@3
            inputs:
              mavenPomFile: 'gateway-service/pom.xml'
              goals: 'clean package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              options: '-DskipTests' # Skip tests to speed up build if needed
            displayName: 'Build API Gateway with Maven'

          # Docker login with ACR credentials from previous stage
          - script: |
              echo "Logging in to ACR: $(acrLoginServer)"
              echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
            displayName: 'Login to ACR'

          # Build and push using docker commands directly
          - script: |
              cd gateway-service
              docker build -t $(acrLoginServer)/$(gatewayImageName):$(springBootVersion) .
              docker tag $(acrLoginServer)/$(gatewayImageName):$(springBootVersion) $(acrLoginServer)/$(gatewayImageName):latest
              docker push $(acrLoginServer)/$(gatewayImageName):$(springBootVersion)
              docker push $(acrLoginServer)/$(gatewayImageName):latest
            displayName: 'Build and push API Gateway image'
      - job: BuildProfileService
        displayName: 'Build Profile Service'
        steps:
          # Setup Java for Maven building
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Setup Java 17'

          # Build with Maven without authentication
          - task: Maven@3
            inputs:
              mavenPomFile: 'profile-service/pom.xml'
              goals: 'clean package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              options: '-DskipTests' # Skip tests to speed up build if needed
            displayName: 'Build Profile Service with Maven'

          # Docker login with ACR credentials from previous stage
          - script: |
              echo "Logging in to ACR: $(acrLoginServer)"
              echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
            displayName: 'Login to ACR'

          # Build and push using docker commands directly
          - script: |
              cd profile-service
              docker build -t $(acrLoginServer)/$(profileServiceImageName):$(springBootVersion) .
              docker tag $(acrLoginServer)/$(profileServiceImageName):$(springBootVersion) $(acrLoginServer)/$(profileServiceImageName):latest
              docker push $(acrLoginServer)/$(profileServiceImageName):$(springBootVersion)
              docker push $(acrLoginServer)/$(profileServiceImageName):latest
            displayName: 'Build and push Profile Service image'
      - job: BuildEmployeeService
        displayName: 'Build Employee Service'
        steps:
          # Setup Java for Maven building
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Setup Java 17'

          # Build with Maven without authentication
          - task: Maven@3
            inputs:
              mavenPomFile: 'employee-performance-service/pom.xml'
              goals: 'clean package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
              mavenVersionOption: 'Default'
              options: '-DskipTests' # Skip tests to speed up build if needed
            displayName: 'Build Employee Service with Maven'

          # Docker login with ACR credentials from previous stage
          - script: |
              echo "Logging in to ACR: $(acrLoginServer)"
              echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
            displayName: 'Login to ACR'

          # Build and push using docker commands directly
          - script: |
              cd employee-performance-service
              docker build -t $(acrLoginServer)/$(employeeServiceImageName):$(springBootVersion) .
              docker tag $(acrLoginServer)/$(employeeServiceImageName):$(springBootVersion) $(acrLoginServer)/$(employeeServiceImageName):latest
              docker push $(acrLoginServer)/$(employeeServiceImageName):$(springBootVersion)
              docker push $(acrLoginServer)/$(employeeServiceImageName):latest
            displayName: 'Build and push Employee Service image'